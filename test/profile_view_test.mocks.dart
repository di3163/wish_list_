// Mocks generated by Mockito 5.0.12 from annotations
// in wish_list_gx/test/profile_view_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;
import 'dart:io' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wish_list_gx/core.dart' as _i4;

import 'profile_view_test.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [MockFirebaseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockFirebaseRepository extends _i1.Mock
    implements _i2.MockFirebaseRepository {
  MockMockFirebaseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<Map<dynamic, dynamic>> getAllRegistredUsers() =>
      (super.noSuchMethod(Invocation.method(#getAllRegistredUsers, []),
              returnValue:
                  Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}))
          as _i3.Future<Map<dynamic, dynamic>>);
  @override
  _i3.Future<void> addAllUserMockList(Map<String, dynamic>? allUsersList) =>
      (super.noSuchMethod(
          Invocation.method(#addAllUserMockList, [allUsersList]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> signUp({String? email, String? password, String? phone}) =>
      (super.noSuchMethod(
          Invocation.method(
              #signUp, [], {#email: email, #password: password, #phone: phone}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> signIn({String? email, String? password}) =>
      (super.noSuchMethod(
          Invocation.method(#signIn, [], {#email: email, #password: password}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(Invocation.method(#signOut, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> addUserWish(_i4.Wish? wish) =>
      (super.noSuchMethod(Invocation.method(#addUserWish, [wish]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> updateUserWish(_i4.Wish? wish) =>
      (super.noSuchMethod(Invocation.method(#updateUserWish, [wish]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<List<_i4.Wish>> getUserWish() =>
      (super.noSuchMethod(Invocation.method(#getUserWish, []),
              returnValue: Future<List<_i4.Wish>>.value(<_i4.Wish>[]))
          as _i3.Future<List<_i4.Wish>>);
  @override
  _i3.Stream<List<_i4.Wish>> getUserWishStream() =>
      (super.noSuchMethod(Invocation.method(#getUserWishStream, []),
              returnValue: Stream<List<_i4.Wish>>.empty())
          as _i3.Stream<List<_i4.Wish>>);
  @override
  _i3.Future<String> saveImage(_i5.File? image) =>
      (super.noSuchMethod(Invocation.method(#saveImage, [image]),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<void> deleteImage(String? imgUrl) =>
      (super.noSuchMethod(Invocation.method(#deleteImage, [imgUrl]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  void deleteWish(_i4.Wish? wish) =>
      super.noSuchMethod(Invocation.method(#deleteWish, [wish]),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
}
